//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace gloUpdates.gloAUSTest {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="gloAUSServiceSoap", Namespace="https://ophit.net/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class gloAUSService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback DownloadProductUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadProductUpdate_70v1OperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInstalogRequestsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInstaLogStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecieveLogFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFtpCredentialsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFtpPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFtpDownloadPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertUpdateDownloadDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateInstalledStatusDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogUpdateDownloadDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogUpdateDownloadDetailsV2OperationCompleted;
        
        private System.Threading.SendOrPostCallback LogUpdateInstallDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckAusIDExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogUpdateInfoForManualProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogUpdateInfoForManualProcessV2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFtpCredentialsForDrugAndICD9CPTOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFtpDownloadPathForDrugAndICD9CPTOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckIsAssestDataRequestedForAusIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadAssestDataRequestDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendAssestRequestedDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadServicesDataRequestDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendServicesRequestedDataOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public gloAUSService() {
            this.Url = global::gloUpdates.Properties.Settings.Default.gloUpdates_gloAUSTest_gloAUSService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event DownloadProductUpdateCompletedEventHandler DownloadProductUpdateCompleted;
        
        /// <remarks/>
        public event DownloadProductUpdate_70v1CompletedEventHandler DownloadProductUpdate_70v1Completed;
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event GetInstalogRequestsCompletedEventHandler GetInstalogRequestsCompleted;
        
        /// <remarks/>
        public event GetInstaLogStatusCompletedEventHandler GetInstaLogStatusCompleted;
        
        /// <remarks/>
        public event RecieveLogFileCompletedEventHandler RecieveLogFileCompleted;
        
        /// <remarks/>
        public event GetFtpCredentialsCompletedEventHandler GetFtpCredentialsCompleted;
        
        /// <remarks/>
        public event GetFtpPasswordCompletedEventHandler GetFtpPasswordCompleted;
        
        /// <remarks/>
        public event GetFtpDownloadPathCompletedEventHandler GetFtpDownloadPathCompleted;
        
        /// <remarks/>
        public event InsertUpdateDownloadDetailsCompletedEventHandler InsertUpdateDownloadDetailsCompleted;
        
        /// <remarks/>
        public event UpdateInstalledStatusDetailsCompletedEventHandler UpdateInstalledStatusDetailsCompleted;
        
        /// <remarks/>
        public event LogUpdateDownloadDetailsCompletedEventHandler LogUpdateDownloadDetailsCompleted;
        
        /// <remarks/>
        public event LogUpdateDownloadDetailsV2CompletedEventHandler LogUpdateDownloadDetailsV2Completed;
        
        /// <remarks/>
        public event LogUpdateInstallDetailsCompletedEventHandler LogUpdateInstallDetailsCompleted;
        
        /// <remarks/>
        public event CheckAusIDExistCompletedEventHandler CheckAusIDExistCompleted;
        
        /// <remarks/>
        public event LogUpdateInfoForManualProcessCompletedEventHandler LogUpdateInfoForManualProcessCompleted;
        
        /// <remarks/>
        public event LogUpdateInfoForManualProcessV2CompletedEventHandler LogUpdateInfoForManualProcessV2Completed;
        
        /// <remarks/>
        public event GetFtpCredentialsForDrugAndICD9CPTCompletedEventHandler GetFtpCredentialsForDrugAndICD9CPTCompleted;
        
        /// <remarks/>
        public event GetProductIDCompletedEventHandler GetProductIDCompleted;
        
        /// <remarks/>
        public event GetFtpDownloadPathForDrugAndICD9CPTCompletedEventHandler GetFtpDownloadPathForDrugAndICD9CPTCompleted;
        
        /// <remarks/>
        public event CheckIsAssestDataRequestedForAusIdCompletedEventHandler CheckIsAssestDataRequestedForAusIdCompleted;
        
        /// <remarks/>
        public event DownloadAssestDataRequestDetailsCompletedEventHandler DownloadAssestDataRequestDetailsCompleted;
        
        /// <remarks/>
        public event SendAssestRequestedDataCompletedEventHandler SendAssestRequestedDataCompleted;
        
        /// <remarks/>
        public event DownloadServicesDataRequestDetailsCompletedEventHandler DownloadServicesDataRequestDetailsCompleted;
        
        /// <remarks/>
        public event SendServicesRequestedDataCompletedEventHandler SendServicesRequestedDataCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/DownloadProductUpdate", RequestNamespace="https://ophit.net/", ResponseNamespace="https://ophit.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadProductUpdate([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] RequestXmlStream) {
            object[] results = this.Invoke("DownloadProductUpdate", new object[] {
                        RequestXmlStream});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadProductUpdateAsync(byte[] RequestXmlStream) {
            this.DownloadProductUpdateAsync(RequestXmlStream, null);
        }
        
        /// <remarks/>
        public void DownloadProductUpdateAsync(byte[] RequestXmlStream, object userState) {
            if ((this.DownloadProductUpdateOperationCompleted == null)) {
                this.DownloadProductUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadProductUpdateOperationCompleted);
            }
            this.InvokeAsync("DownloadProductUpdate", new object[] {
                        RequestXmlStream}, this.DownloadProductUpdateOperationCompleted, userState);
        }
        
        private void OnDownloadProductUpdateOperationCompleted(object arg) {
            if ((this.DownloadProductUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadProductUpdateCompleted(this, new DownloadProductUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/DownloadProductUpdate_70v1", RequestNamespace="https://ophit.net/", ResponseNamespace="https://ophit.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadProductUpdate_70v1([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] RequestXmlStream) {
            object[] results = this.Invoke("DownloadProductUpdate_70v1", new object[] {
                        RequestXmlStream});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadProductUpdate_70v1Async(byte[] RequestXmlStream) {
            this.DownloadProductUpdate_70v1Async(RequestXmlStream, null);
        }
        
        /// <remarks/>
        public void DownloadProductUpdate_70v1Async(byte[] RequestXmlStream, object userState) {
            if ((this.DownloadProductUpdate_70v1OperationCompleted == null)) {
                this.DownloadProductUpdate_70v1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadProductUpdate_70v1OperationCompleted);
            }
            this.InvokeAsync("DownloadProductUpdate_70v1", new object[] {
                        RequestXmlStream}, this.DownloadProductUpdate_70v1OperationCompleted, userState);
        }
        
        private void OnDownloadProductUpdate_70v1OperationCompleted(object arg) {
            if ((this.DownloadProductUpdate_70v1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadProductUpdate_70v1Completed(this, new DownloadProductUpdate_70v1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/Login", RequestNamespace="https://ophit.net/", ResponseNamespace="https://ophit.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Login(string userid, string password) {
            object[] results = this.Invoke("Login", new object[] {
                        userid,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(string userid, string password) {
            this.LoginAsync(userid, password, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string userid, string password, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        userid,
                        password}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/GetInstalogRequests", RequestNamespace="https://ophit.net/", ResponseNamespace="https://ophit.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetInstalogRequests(string strClinicId) {
            object[] results = this.Invoke("GetInstalogRequests", new object[] {
                        strClinicId});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetInstalogRequestsAsync(string strClinicId) {
            this.GetInstalogRequestsAsync(strClinicId, null);
        }
        
        /// <remarks/>
        public void GetInstalogRequestsAsync(string strClinicId, object userState) {
            if ((this.GetInstalogRequestsOperationCompleted == null)) {
                this.GetInstalogRequestsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInstalogRequestsOperationCompleted);
            }
            this.InvokeAsync("GetInstalogRequests", new object[] {
                        strClinicId}, this.GetInstalogRequestsOperationCompleted, userState);
        }
        
        private void OnGetInstalogRequestsOperationCompleted(object arg) {
            if ((this.GetInstalogRequestsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInstalogRequestsCompleted(this, new GetInstalogRequestsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/GetInstaLogStatus", RequestNamespace="https://ophit.net/", ResponseNamespace="https://ophit.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetInstaLogStatus(string sClientIdentifier) {
            object[] results = this.Invoke("GetInstaLogStatus", new object[] {
                        sClientIdentifier});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetInstaLogStatusAsync(string sClientIdentifier) {
            this.GetInstaLogStatusAsync(sClientIdentifier, null);
        }
        
        /// <remarks/>
        public void GetInstaLogStatusAsync(string sClientIdentifier, object userState) {
            if ((this.GetInstaLogStatusOperationCompleted == null)) {
                this.GetInstaLogStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInstaLogStatusOperationCompleted);
            }
            this.InvokeAsync("GetInstaLogStatus", new object[] {
                        sClientIdentifier}, this.GetInstaLogStatusOperationCompleted, userState);
        }
        
        private void OnGetInstaLogStatusOperationCompleted(object arg) {
            if ((this.GetInstaLogStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInstaLogStatusCompleted(this, new GetInstaLogStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/RecieveLogFile", RequestNamespace="https://ophit.net/", ResponseNamespace="https://ophit.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RecieveLogFile(object[] FileDetails, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] cntFromRequest, bool blnIsGeneral) {
            object[] results = this.Invoke("RecieveLogFile", new object[] {
                        FileDetails,
                        cntFromRequest,
                        blnIsGeneral});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RecieveLogFileAsync(object[] FileDetails, byte[] cntFromRequest, bool blnIsGeneral) {
            this.RecieveLogFileAsync(FileDetails, cntFromRequest, blnIsGeneral, null);
        }
        
        /// <remarks/>
        public void RecieveLogFileAsync(object[] FileDetails, byte[] cntFromRequest, bool blnIsGeneral, object userState) {
            if ((this.RecieveLogFileOperationCompleted == null)) {
                this.RecieveLogFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecieveLogFileOperationCompleted);
            }
            this.InvokeAsync("RecieveLogFile", new object[] {
                        FileDetails,
                        cntFromRequest,
                        blnIsGeneral}, this.RecieveLogFileOperationCompleted, userState);
        }
        
        private void OnRecieveLogFileOperationCompleted(object arg) {
            if ((this.RecieveLogFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecieveLogFileCompleted(this, new RecieveLogFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/GetFtpCredentials", RequestNamespace="https://ophit.net/", ResponseNamespace="https://ophit.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFtpCredentials(int updateId, string _key) {
            object[] results = this.Invoke("GetFtpCredentials", new object[] {
                        updateId,
                        _key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFtpCredentialsAsync(int updateId, string _key) {
            this.GetFtpCredentialsAsync(updateId, _key, null);
        }
        
        /// <remarks/>
        public void GetFtpCredentialsAsync(int updateId, string _key, object userState) {
            if ((this.GetFtpCredentialsOperationCompleted == null)) {
                this.GetFtpCredentialsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFtpCredentialsOperationCompleted);
            }
            this.InvokeAsync("GetFtpCredentials", new object[] {
                        updateId,
                        _key}, this.GetFtpCredentialsOperationCompleted, userState);
        }
        
        private void OnGetFtpCredentialsOperationCompleted(object arg) {
            if ((this.GetFtpCredentialsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFtpCredentialsCompleted(this, new GetFtpCredentialsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/GetFtpPassword", RequestNamespace="https://ophit.net/", ResponseNamespace="https://ophit.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFtpPassword(int updateId, string _key) {
            object[] results = this.Invoke("GetFtpPassword", new object[] {
                        updateId,
                        _key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFtpPasswordAsync(int updateId, string _key) {
            this.GetFtpPasswordAsync(updateId, _key, null);
        }
        
        /// <remarks/>
        public void GetFtpPasswordAsync(int updateId, string _key, object userState) {
            if ((this.GetFtpPasswordOperationCompleted == null)) {
                this.GetFtpPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFtpPasswordOperationCompleted);
            }
            this.InvokeAsync("GetFtpPassword", new object[] {
                        updateId,
                        _key}, this.GetFtpPasswordOperationCompleted, userState);
        }
        
        private void OnGetFtpPasswordOperationCompleted(object arg) {
            if ((this.GetFtpPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFtpPasswordCompleted(this, new GetFtpPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/GetFtpDownloadPath", RequestNamespace="https://ophit.net/", ResponseNamespace="https://ophit.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFtpDownloadPath(int updateId, string _key) {
            object[] results = this.Invoke("GetFtpDownloadPath", new object[] {
                        updateId,
                        _key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFtpDownloadPathAsync(int updateId, string _key) {
            this.GetFtpDownloadPathAsync(updateId, _key, null);
        }
        
        /// <remarks/>
        public void GetFtpDownloadPathAsync(int updateId, string _key, object userState) {
            if ((this.GetFtpDownloadPathOperationCompleted == null)) {
                this.GetFtpDownloadPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFtpDownloadPathOperationCompleted);
            }
            this.InvokeAsync("GetFtpDownloadPath", new object[] {
                        updateId,
                        _key}, this.GetFtpDownloadPathOperationCompleted, userState);
        }
        
        private void OnGetFtpDownloadPathOperationCompleted(object arg) {
            if ((this.GetFtpDownloadPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFtpDownloadPathCompleted(this, new GetFtpDownloadPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/InsertUpdateDownloadDetails", RequestNamespace="https://ophit.net/", ResponseNamespace="https://ophit.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InsertUpdateDownloadDetails(string strClientAusId, long updateId, bool bIsUpdateDownloadStatus, int nUpdateDownloadDetailId, bool bIsUpdateInstallStatus, string strMachineName, string _key) {
            object[] results = this.Invoke("InsertUpdateDownloadDetails", new object[] {
                        strClientAusId,
                        updateId,
                        bIsUpdateDownloadStatus,
                        nUpdateDownloadDetailId,
                        bIsUpdateInstallStatus,
                        strMachineName,
                        _key});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertUpdateDownloadDetailsAsync(string strClientAusId, long updateId, bool bIsUpdateDownloadStatus, int nUpdateDownloadDetailId, bool bIsUpdateInstallStatus, string strMachineName, string _key) {
            this.InsertUpdateDownloadDetailsAsync(strClientAusId, updateId, bIsUpdateDownloadStatus, nUpdateDownloadDetailId, bIsUpdateInstallStatus, strMachineName, _key, null);
        }
        
        /// <remarks/>
        public void InsertUpdateDownloadDetailsAsync(string strClientAusId, long updateId, bool bIsUpdateDownloadStatus, int nUpdateDownloadDetailId, bool bIsUpdateInstallStatus, string strMachineName, string _key, object userState) {
            if ((this.InsertUpdateDownloadDetailsOperationCompleted == null)) {
                this.InsertUpdateDownloadDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertUpdateDownloadDetailsOperationCompleted);
            }
            this.InvokeAsync("InsertUpdateDownloadDetails", new object[] {
                        strClientAusId,
                        updateId,
                        bIsUpdateDownloadStatus,
                        nUpdateDownloadDetailId,
                        bIsUpdateInstallStatus,
                        strMachineName,
                        _key}, this.InsertUpdateDownloadDetailsOperationCompleted, userState);
        }
        
        private void OnInsertUpdateDownloadDetailsOperationCompleted(object arg) {
            if ((this.InsertUpdateDownloadDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertUpdateDownloadDetailsCompleted(this, new InsertUpdateDownloadDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/UpdateInstalledStatusDetails", RequestNamespace="https://ophit.net/", ResponseNamespace="https://ophit.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateInstalledStatusDetails(string strClientAusId, long updateId, bool bIsUpdateInstallStatus, string strMachineName, string _key, string strProductVersion, string strProductPreviousVersion, string strDBName) {
            object[] results = this.Invoke("UpdateInstalledStatusDetails", new object[] {
                        strClientAusId,
                        updateId,
                        bIsUpdateInstallStatus,
                        strMachineName,
                        _key,
                        strProductVersion,
                        strProductPreviousVersion,
                        strDBName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateInstalledStatusDetailsAsync(string strClientAusId, long updateId, bool bIsUpdateInstallStatus, string strMachineName, string _key, string strProductVersion, string strProductPreviousVersion, string strDBName) {
            this.UpdateInstalledStatusDetailsAsync(strClientAusId, updateId, bIsUpdateInstallStatus, strMachineName, _key, strProductVersion, strProductPreviousVersion, strDBName, null);
        }
        
        /// <remarks/>
        public void UpdateInstalledStatusDetailsAsync(string strClientAusId, long updateId, bool bIsUpdateInstallStatus, string strMachineName, string _key, string strProductVersion, string strProductPreviousVersion, string strDBName, object userState) {
            if ((this.UpdateInstalledStatusDetailsOperationCompleted == null)) {
                this.UpdateInstalledStatusDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateInstalledStatusDetailsOperationCompleted);
            }
            this.InvokeAsync("UpdateInstalledStatusDetails", new object[] {
                        strClientAusId,
                        updateId,
                        bIsUpdateInstallStatus,
                        strMachineName,
                        _key,
                        strProductVersion,
                        strProductPreviousVersion,
                        strDBName}, this.UpdateInstalledStatusDetailsOperationCompleted, userState);
        }
        
        private void OnUpdateInstalledStatusDetailsOperationCompleted(object arg) {
            if ((this.UpdateInstalledStatusDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateInstalledStatusDetailsCompleted(this, new UpdateInstalledStatusDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/LogUpdateDownloadDetails", RequestNamespace="https://ophit.net/", ResponseNamespace="https://ophit.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LogUpdateDownloadDetails(string strClientAusId, long updateId, bool bIsUpdateDownloadStatus, int nUpdateDownloadDetailId, bool bIsUpdateInstallStatus, string strMachineName, int nProductId, string strProductVersion, string strProductPreviousVersion, string strDBName, string _key) {
            object[] results = this.Invoke("LogUpdateDownloadDetails", new object[] {
                        strClientAusId,
                        updateId,
                        bIsUpdateDownloadStatus,
                        nUpdateDownloadDetailId,
                        bIsUpdateInstallStatus,
                        strMachineName,
                        nProductId,
                        strProductVersion,
                        strProductPreviousVersion,
                        strDBName,
                        _key});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LogUpdateDownloadDetailsAsync(string strClientAusId, long updateId, bool bIsUpdateDownloadStatus, int nUpdateDownloadDetailId, bool bIsUpdateInstallStatus, string strMachineName, int nProductId, string strProductVersion, string strProductPreviousVersion, string strDBName, string _key) {
            this.LogUpdateDownloadDetailsAsync(strClientAusId, updateId, bIsUpdateDownloadStatus, nUpdateDownloadDetailId, bIsUpdateInstallStatus, strMachineName, nProductId, strProductVersion, strProductPreviousVersion, strDBName, _key, null);
        }
        
        /// <remarks/>
        public void LogUpdateDownloadDetailsAsync(string strClientAusId, long updateId, bool bIsUpdateDownloadStatus, int nUpdateDownloadDetailId, bool bIsUpdateInstallStatus, string strMachineName, int nProductId, string strProductVersion, string strProductPreviousVersion, string strDBName, string _key, object userState) {
            if ((this.LogUpdateDownloadDetailsOperationCompleted == null)) {
                this.LogUpdateDownloadDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogUpdateDownloadDetailsOperationCompleted);
            }
            this.InvokeAsync("LogUpdateDownloadDetails", new object[] {
                        strClientAusId,
                        updateId,
                        bIsUpdateDownloadStatus,
                        nUpdateDownloadDetailId,
                        bIsUpdateInstallStatus,
                        strMachineName,
                        nProductId,
                        strProductVersion,
                        strProductPreviousVersion,
                        strDBName,
                        _key}, this.LogUpdateDownloadDetailsOperationCompleted, userState);
        }
        
        private void OnLogUpdateDownloadDetailsOperationCompleted(object arg) {
            if ((this.LogUpdateDownloadDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogUpdateDownloadDetailsCompleted(this, new LogUpdateDownloadDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/LogUpdateDownloadDetailsV2", RequestNamespace="https://ophit.net/", ResponseNamespace="https://ophit.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LogUpdateDownloadDetailsV2(string strClientAusId, long updateId, bool bIsUpdateDownloadStatus, int nUpdateDownloadDetailId, bool bIsUpdateInstallStatus, string strMachineName, int nProductId, string strProductVersion, string strProductPreviousVersion, string strDBName, bool IsDbReplication, string _key) {
            object[] results = this.Invoke("LogUpdateDownloadDetailsV2", new object[] {
                        strClientAusId,
                        updateId,
                        bIsUpdateDownloadStatus,
                        nUpdateDownloadDetailId,
                        bIsUpdateInstallStatus,
                        strMachineName,
                        nProductId,
                        strProductVersion,
                        strProductPreviousVersion,
                        strDBName,
                        IsDbReplication,
                        _key});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LogUpdateDownloadDetailsV2Async(string strClientAusId, long updateId, bool bIsUpdateDownloadStatus, int nUpdateDownloadDetailId, bool bIsUpdateInstallStatus, string strMachineName, int nProductId, string strProductVersion, string strProductPreviousVersion, string strDBName, bool IsDbReplication, string _key) {
            this.LogUpdateDownloadDetailsV2Async(strClientAusId, updateId, bIsUpdateDownloadStatus, nUpdateDownloadDetailId, bIsUpdateInstallStatus, strMachineName, nProductId, strProductVersion, strProductPreviousVersion, strDBName, IsDbReplication, _key, null);
        }
        
        /// <remarks/>
        public void LogUpdateDownloadDetailsV2Async(string strClientAusId, long updateId, bool bIsUpdateDownloadStatus, int nUpdateDownloadDetailId, bool bIsUpdateInstallStatus, string strMachineName, int nProductId, string strProductVersion, string strProductPreviousVersion, string strDBName, bool IsDbReplication, string _key, object userState) {
            if ((this.LogUpdateDownloadDetailsV2OperationCompleted == null)) {
                this.LogUpdateDownloadDetailsV2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogUpdateDownloadDetailsV2OperationCompleted);
            }
            this.InvokeAsync("LogUpdateDownloadDetailsV2", new object[] {
                        strClientAusId,
                        updateId,
                        bIsUpdateDownloadStatus,
                        nUpdateDownloadDetailId,
                        bIsUpdateInstallStatus,
                        strMachineName,
                        nProductId,
                        strProductVersion,
                        strProductPreviousVersion,
                        strDBName,
                        IsDbReplication,
                        _key}, this.LogUpdateDownloadDetailsV2OperationCompleted, userState);
        }
        
        private void OnLogUpdateDownloadDetailsV2OperationCompleted(object arg) {
            if ((this.LogUpdateDownloadDetailsV2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogUpdateDownloadDetailsV2Completed(this, new LogUpdateDownloadDetailsV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/LogUpdateInstallDetails", RequestNamespace="https://ophit.net/", ResponseNamespace="https://ophit.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LogUpdateInstallDetails(string strClientAusId, long updateId, bool bIsUpdateInstallStatus, string strMachineName, string _key, int nProductId, string strProductVersion, string strProductPreviousVersion, string strDBName) {
            object[] results = this.Invoke("LogUpdateInstallDetails", new object[] {
                        strClientAusId,
                        updateId,
                        bIsUpdateInstallStatus,
                        strMachineName,
                        _key,
                        nProductId,
                        strProductVersion,
                        strProductPreviousVersion,
                        strDBName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LogUpdateInstallDetailsAsync(string strClientAusId, long updateId, bool bIsUpdateInstallStatus, string strMachineName, string _key, int nProductId, string strProductVersion, string strProductPreviousVersion, string strDBName) {
            this.LogUpdateInstallDetailsAsync(strClientAusId, updateId, bIsUpdateInstallStatus, strMachineName, _key, nProductId, strProductVersion, strProductPreviousVersion, strDBName, null);
        }
        
        /// <remarks/>
        public void LogUpdateInstallDetailsAsync(string strClientAusId, long updateId, bool bIsUpdateInstallStatus, string strMachineName, string _key, int nProductId, string strProductVersion, string strProductPreviousVersion, string strDBName, object userState) {
            if ((this.LogUpdateInstallDetailsOperationCompleted == null)) {
                this.LogUpdateInstallDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogUpdateInstallDetailsOperationCompleted);
            }
            this.InvokeAsync("LogUpdateInstallDetails", new object[] {
                        strClientAusId,
                        updateId,
                        bIsUpdateInstallStatus,
                        strMachineName,
                        _key,
                        nProductId,
                        strProductVersion,
                        strProductPreviousVersion,
                        strDBName}, this.LogUpdateInstallDetailsOperationCompleted, userState);
        }
        
        private void OnLogUpdateInstallDetailsOperationCompleted(object arg) {
            if ((this.LogUpdateInstallDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogUpdateInstallDetailsCompleted(this, new LogUpdateInstallDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/CheckAusIDExist", RequestNamespace="https://ophit.net/", ResponseNamespace="https://ophit.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckAusIDExist(string strClientAusId, string _key) {
            object[] results = this.Invoke("CheckAusIDExist", new object[] {
                        strClientAusId,
                        _key});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckAusIDExistAsync(string strClientAusId, string _key) {
            this.CheckAusIDExistAsync(strClientAusId, _key, null);
        }
        
        /// <remarks/>
        public void CheckAusIDExistAsync(string strClientAusId, string _key, object userState) {
            if ((this.CheckAusIDExistOperationCompleted == null)) {
                this.CheckAusIDExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckAusIDExistOperationCompleted);
            }
            this.InvokeAsync("CheckAusIDExist", new object[] {
                        strClientAusId,
                        _key}, this.CheckAusIDExistOperationCompleted, userState);
        }
        
        private void OnCheckAusIDExistOperationCompleted(object arg) {
            if ((this.CheckAusIDExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckAusIDExistCompleted(this, new CheckAusIDExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/LogUpdateInfoForManualProcess", RequestNamespace="https://ophit.net/", ResponseNamespace="https://ophit.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LogUpdateInfoForManualProcess(string strClientAusId, int nProductId, string strProductVersion, string strMachineName, string _key, string strPreviouVersion, string strDBName) {
            object[] results = this.Invoke("LogUpdateInfoForManualProcess", new object[] {
                        strClientAusId,
                        nProductId,
                        strProductVersion,
                        strMachineName,
                        _key,
                        strPreviouVersion,
                        strDBName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LogUpdateInfoForManualProcessAsync(string strClientAusId, int nProductId, string strProductVersion, string strMachineName, string _key, string strPreviouVersion, string strDBName) {
            this.LogUpdateInfoForManualProcessAsync(strClientAusId, nProductId, strProductVersion, strMachineName, _key, strPreviouVersion, strDBName, null);
        }
        
        /// <remarks/>
        public void LogUpdateInfoForManualProcessAsync(string strClientAusId, int nProductId, string strProductVersion, string strMachineName, string _key, string strPreviouVersion, string strDBName, object userState) {
            if ((this.LogUpdateInfoForManualProcessOperationCompleted == null)) {
                this.LogUpdateInfoForManualProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogUpdateInfoForManualProcessOperationCompleted);
            }
            this.InvokeAsync("LogUpdateInfoForManualProcess", new object[] {
                        strClientAusId,
                        nProductId,
                        strProductVersion,
                        strMachineName,
                        _key,
                        strPreviouVersion,
                        strDBName}, this.LogUpdateInfoForManualProcessOperationCompleted, userState);
        }
        
        private void OnLogUpdateInfoForManualProcessOperationCompleted(object arg) {
            if ((this.LogUpdateInfoForManualProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogUpdateInfoForManualProcessCompleted(this, new LogUpdateInfoForManualProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/LogUpdateInfoForManualProcessV2", RequestNamespace="https://ophit.net/", ResponseNamespace="https://ophit.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LogUpdateInfoForManualProcessV2(string strClientAusId, int nProductId, string strProductVersion, string strMachineName, string _key, string strPreviouVersion, string strDBName, bool IsDbReplication) {
            object[] results = this.Invoke("LogUpdateInfoForManualProcessV2", new object[] {
                        strClientAusId,
                        nProductId,
                        strProductVersion,
                        strMachineName,
                        _key,
                        strPreviouVersion,
                        strDBName,
                        IsDbReplication});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LogUpdateInfoForManualProcessV2Async(string strClientAusId, int nProductId, string strProductVersion, string strMachineName, string _key, string strPreviouVersion, string strDBName, bool IsDbReplication) {
            this.LogUpdateInfoForManualProcessV2Async(strClientAusId, nProductId, strProductVersion, strMachineName, _key, strPreviouVersion, strDBName, IsDbReplication, null);
        }
        
        /// <remarks/>
        public void LogUpdateInfoForManualProcessV2Async(string strClientAusId, int nProductId, string strProductVersion, string strMachineName, string _key, string strPreviouVersion, string strDBName, bool IsDbReplication, object userState) {
            if ((this.LogUpdateInfoForManualProcessV2OperationCompleted == null)) {
                this.LogUpdateInfoForManualProcessV2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogUpdateInfoForManualProcessV2OperationCompleted);
            }
            this.InvokeAsync("LogUpdateInfoForManualProcessV2", new object[] {
                        strClientAusId,
                        nProductId,
                        strProductVersion,
                        strMachineName,
                        _key,
                        strPreviouVersion,
                        strDBName,
                        IsDbReplication}, this.LogUpdateInfoForManualProcessV2OperationCompleted, userState);
        }
        
        private void OnLogUpdateInfoForManualProcessV2OperationCompleted(object arg) {
            if ((this.LogUpdateInfoForManualProcessV2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogUpdateInfoForManualProcessV2Completed(this, new LogUpdateInfoForManualProcessV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/GetFtpCredentialsForDrugAndICD9CPT", RequestNamespace="https://ophit.net/", ResponseNamespace="https://ophit.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFtpCredentialsForDrugAndICD9CPT(string _key) {
            object[] results = this.Invoke("GetFtpCredentialsForDrugAndICD9CPT", new object[] {
                        _key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFtpCredentialsForDrugAndICD9CPTAsync(string _key) {
            this.GetFtpCredentialsForDrugAndICD9CPTAsync(_key, null);
        }
        
        /// <remarks/>
        public void GetFtpCredentialsForDrugAndICD9CPTAsync(string _key, object userState) {
            if ((this.GetFtpCredentialsForDrugAndICD9CPTOperationCompleted == null)) {
                this.GetFtpCredentialsForDrugAndICD9CPTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFtpCredentialsForDrugAndICD9CPTOperationCompleted);
            }
            this.InvokeAsync("GetFtpCredentialsForDrugAndICD9CPT", new object[] {
                        _key}, this.GetFtpCredentialsForDrugAndICD9CPTOperationCompleted, userState);
        }
        
        private void OnGetFtpCredentialsForDrugAndICD9CPTOperationCompleted(object arg) {
            if ((this.GetFtpCredentialsForDrugAndICD9CPTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFtpCredentialsForDrugAndICD9CPTCompleted(this, new GetFtpCredentialsForDrugAndICD9CPTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/GetProductID", RequestNamespace="https://ophit.net/", ResponseNamespace="https://ophit.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetProductID(int nProductCode, string strProductVersion, string _key) {
            object[] results = this.Invoke("GetProductID", new object[] {
                        nProductCode,
                        strProductVersion,
                        _key});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductIDAsync(int nProductCode, string strProductVersion, string _key) {
            this.GetProductIDAsync(nProductCode, strProductVersion, _key, null);
        }
        
        /// <remarks/>
        public void GetProductIDAsync(int nProductCode, string strProductVersion, string _key, object userState) {
            if ((this.GetProductIDOperationCompleted == null)) {
                this.GetProductIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductIDOperationCompleted);
            }
            this.InvokeAsync("GetProductID", new object[] {
                        nProductCode,
                        strProductVersion,
                        _key}, this.GetProductIDOperationCompleted, userState);
        }
        
        private void OnGetProductIDOperationCompleted(object arg) {
            if ((this.GetProductIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductIDCompleted(this, new GetProductIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/GetFtpDownloadPathForDrugAndICD9CPT", RequestNamespace="https://ophit.net/", ResponseNamespace="https://ophit.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFtpDownloadPathForDrugAndICD9CPT(string strFlag, string strDownloadType, string _key) {
            object[] results = this.Invoke("GetFtpDownloadPathForDrugAndICD9CPT", new object[] {
                        strFlag,
                        strDownloadType,
                        _key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFtpDownloadPathForDrugAndICD9CPTAsync(string strFlag, string strDownloadType, string _key) {
            this.GetFtpDownloadPathForDrugAndICD9CPTAsync(strFlag, strDownloadType, _key, null);
        }
        
        /// <remarks/>
        public void GetFtpDownloadPathForDrugAndICD9CPTAsync(string strFlag, string strDownloadType, string _key, object userState) {
            if ((this.GetFtpDownloadPathForDrugAndICD9CPTOperationCompleted == null)) {
                this.GetFtpDownloadPathForDrugAndICD9CPTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFtpDownloadPathForDrugAndICD9CPTOperationCompleted);
            }
            this.InvokeAsync("GetFtpDownloadPathForDrugAndICD9CPT", new object[] {
                        strFlag,
                        strDownloadType,
                        _key}, this.GetFtpDownloadPathForDrugAndICD9CPTOperationCompleted, userState);
        }
        
        private void OnGetFtpDownloadPathForDrugAndICD9CPTOperationCompleted(object arg) {
            if ((this.GetFtpDownloadPathForDrugAndICD9CPTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFtpDownloadPathForDrugAndICD9CPTCompleted(this, new GetFtpDownloadPathForDrugAndICD9CPTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/CheckIsAssestDataRequestedForAusId", RequestNamespace="https://ophit.net/", ResponseNamespace="https://ophit.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckIsAssestDataRequestedForAusId(string strClientAusId, string _key) {
            object[] results = this.Invoke("CheckIsAssestDataRequestedForAusId", new object[] {
                        strClientAusId,
                        _key});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckIsAssestDataRequestedForAusIdAsync(string strClientAusId, string _key) {
            this.CheckIsAssestDataRequestedForAusIdAsync(strClientAusId, _key, null);
        }
        
        /// <remarks/>
        public void CheckIsAssestDataRequestedForAusIdAsync(string strClientAusId, string _key, object userState) {
            if ((this.CheckIsAssestDataRequestedForAusIdOperationCompleted == null)) {
                this.CheckIsAssestDataRequestedForAusIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckIsAssestDataRequestedForAusIdOperationCompleted);
            }
            this.InvokeAsync("CheckIsAssestDataRequestedForAusId", new object[] {
                        strClientAusId,
                        _key}, this.CheckIsAssestDataRequestedForAusIdOperationCompleted, userState);
        }
        
        private void OnCheckIsAssestDataRequestedForAusIdOperationCompleted(object arg) {
            if ((this.CheckIsAssestDataRequestedForAusIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckIsAssestDataRequestedForAusIdCompleted(this, new CheckIsAssestDataRequestedForAusIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/DownloadAssestDataRequestDetails", RequestNamespace="https://ophit.net/", ResponseNamespace="https://ophit.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadAssestDataRequestDetails(string strClientAusId, string _key) {
            object[] results = this.Invoke("DownloadAssestDataRequestDetails", new object[] {
                        strClientAusId,
                        _key});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadAssestDataRequestDetailsAsync(string strClientAusId, string _key) {
            this.DownloadAssestDataRequestDetailsAsync(strClientAusId, _key, null);
        }
        
        /// <remarks/>
        public void DownloadAssestDataRequestDetailsAsync(string strClientAusId, string _key, object userState) {
            if ((this.DownloadAssestDataRequestDetailsOperationCompleted == null)) {
                this.DownloadAssestDataRequestDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadAssestDataRequestDetailsOperationCompleted);
            }
            this.InvokeAsync("DownloadAssestDataRequestDetails", new object[] {
                        strClientAusId,
                        _key}, this.DownloadAssestDataRequestDetailsOperationCompleted, userState);
        }
        
        private void OnDownloadAssestDataRequestDetailsOperationCompleted(object arg) {
            if ((this.DownloadAssestDataRequestDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadAssestDataRequestDetailsCompleted(this, new DownloadAssestDataRequestDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/SendAssestRequestedData", RequestNamespace="https://ophit.net/", ResponseNamespace="https://ophit.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendAssestRequestedData([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] ResponseXmlStream, string Key) {
            this.Invoke("SendAssestRequestedData", new object[] {
                        ResponseXmlStream,
                        Key});
        }
        
        /// <remarks/>
        public void SendAssestRequestedDataAsync(byte[] ResponseXmlStream, string Key) {
            this.SendAssestRequestedDataAsync(ResponseXmlStream, Key, null);
        }
        
        /// <remarks/>
        public void SendAssestRequestedDataAsync(byte[] ResponseXmlStream, string Key, object userState) {
            if ((this.SendAssestRequestedDataOperationCompleted == null)) {
                this.SendAssestRequestedDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendAssestRequestedDataOperationCompleted);
            }
            this.InvokeAsync("SendAssestRequestedData", new object[] {
                        ResponseXmlStream,
                        Key}, this.SendAssestRequestedDataOperationCompleted, userState);
        }
        
        private void OnSendAssestRequestedDataOperationCompleted(object arg) {
            if ((this.SendAssestRequestedDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendAssestRequestedDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/DownloadServicesDataRequestDetails", RequestNamespace="https://ophit.net/", ResponseNamespace="https://ophit.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadServicesDataRequestDetails(string strClientAusId, string _key) {
            object[] results = this.Invoke("DownloadServicesDataRequestDetails", new object[] {
                        strClientAusId,
                        _key});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadServicesDataRequestDetailsAsync(string strClientAusId, string _key) {
            this.DownloadServicesDataRequestDetailsAsync(strClientAusId, _key, null);
        }
        
        /// <remarks/>
        public void DownloadServicesDataRequestDetailsAsync(string strClientAusId, string _key, object userState) {
            if ((this.DownloadServicesDataRequestDetailsOperationCompleted == null)) {
                this.DownloadServicesDataRequestDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadServicesDataRequestDetailsOperationCompleted);
            }
            this.InvokeAsync("DownloadServicesDataRequestDetails", new object[] {
                        strClientAusId,
                        _key}, this.DownloadServicesDataRequestDetailsOperationCompleted, userState);
        }
        
        private void OnDownloadServicesDataRequestDetailsOperationCompleted(object arg) {
            if ((this.DownloadServicesDataRequestDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadServicesDataRequestDetailsCompleted(this, new DownloadServicesDataRequestDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/SendServicesRequestedData", RequestNamespace="https://ophit.net/", ResponseNamespace="https://ophit.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendServicesRequestedData([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] ResponseXmlStream) {
            this.Invoke("SendServicesRequestedData", new object[] {
                        ResponseXmlStream});
        }
        
        /// <remarks/>
        public void SendServicesRequestedDataAsync(byte[] ResponseXmlStream) {
            this.SendServicesRequestedDataAsync(ResponseXmlStream, null);
        }
        
        /// <remarks/>
        public void SendServicesRequestedDataAsync(byte[] ResponseXmlStream, object userState) {
            if ((this.SendServicesRequestedDataOperationCompleted == null)) {
                this.SendServicesRequestedDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendServicesRequestedDataOperationCompleted);
            }
            this.InvokeAsync("SendServicesRequestedData", new object[] {
                        ResponseXmlStream}, this.SendServicesRequestedDataOperationCompleted, userState);
        }
        
        private void OnSendServicesRequestedDataOperationCompleted(object arg) {
            if ((this.SendServicesRequestedDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendServicesRequestedDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DownloadProductUpdateCompletedEventHandler(object sender, DownloadProductUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadProductUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadProductUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DownloadProductUpdate_70v1CompletedEventHandler(object sender, DownloadProductUpdate_70v1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadProductUpdate_70v1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadProductUpdate_70v1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetInstalogRequestsCompletedEventHandler(object sender, GetInstalogRequestsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInstalogRequestsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInstalogRequestsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetInstaLogStatusCompletedEventHandler(object sender, GetInstaLogStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInstaLogStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInstaLogStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void RecieveLogFileCompletedEventHandler(object sender, RecieveLogFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecieveLogFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecieveLogFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetFtpCredentialsCompletedEventHandler(object sender, GetFtpCredentialsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFtpCredentialsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFtpCredentialsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetFtpPasswordCompletedEventHandler(object sender, GetFtpPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFtpPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFtpPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetFtpDownloadPathCompletedEventHandler(object sender, GetFtpDownloadPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFtpDownloadPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFtpDownloadPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertUpdateDownloadDetailsCompletedEventHandler(object sender, InsertUpdateDownloadDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertUpdateDownloadDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertUpdateDownloadDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateInstalledStatusDetailsCompletedEventHandler(object sender, UpdateInstalledStatusDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateInstalledStatusDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateInstalledStatusDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void LogUpdateDownloadDetailsCompletedEventHandler(object sender, LogUpdateDownloadDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogUpdateDownloadDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogUpdateDownloadDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void LogUpdateDownloadDetailsV2CompletedEventHandler(object sender, LogUpdateDownloadDetailsV2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogUpdateDownloadDetailsV2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogUpdateDownloadDetailsV2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void LogUpdateInstallDetailsCompletedEventHandler(object sender, LogUpdateInstallDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogUpdateInstallDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogUpdateInstallDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckAusIDExistCompletedEventHandler(object sender, CheckAusIDExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckAusIDExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckAusIDExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void LogUpdateInfoForManualProcessCompletedEventHandler(object sender, LogUpdateInfoForManualProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogUpdateInfoForManualProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogUpdateInfoForManualProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void LogUpdateInfoForManualProcessV2CompletedEventHandler(object sender, LogUpdateInfoForManualProcessV2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogUpdateInfoForManualProcessV2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogUpdateInfoForManualProcessV2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetFtpCredentialsForDrugAndICD9CPTCompletedEventHandler(object sender, GetFtpCredentialsForDrugAndICD9CPTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFtpCredentialsForDrugAndICD9CPTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFtpCredentialsForDrugAndICD9CPTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetProductIDCompletedEventHandler(object sender, GetProductIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetFtpDownloadPathForDrugAndICD9CPTCompletedEventHandler(object sender, GetFtpDownloadPathForDrugAndICD9CPTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFtpDownloadPathForDrugAndICD9CPTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFtpDownloadPathForDrugAndICD9CPTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckIsAssestDataRequestedForAusIdCompletedEventHandler(object sender, CheckIsAssestDataRequestedForAusIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckIsAssestDataRequestedForAusIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckIsAssestDataRequestedForAusIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DownloadAssestDataRequestDetailsCompletedEventHandler(object sender, DownloadAssestDataRequestDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadAssestDataRequestDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadAssestDataRequestDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SendAssestRequestedDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DownloadServicesDataRequestDetailsCompletedEventHandler(object sender, DownloadServicesDataRequestDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadServicesDataRequestDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadServicesDataRequestDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SendServicesRequestedDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591